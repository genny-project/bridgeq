#quarkus.http.port=8088


%prod.quarkus.oidc.auth-server-url=${KEYCLOAK_AUTH_URL:http://localhost:8180/auth/realms/quarkus}
%dev.quarkus.oidc.auth-server-url=${KEYCLOAK_AUTH_URL:http://localhost:8180/auth/realms/quarkus}
quarkus.keycloak.devservices.realm-path=quarkus-realm.json
quarkus.oidc.client-id=${KEYCLOAK_CLIENT_ID:frontend}
%test.quarkus.oidc.client-id=frontend
quarkus.oidc.application-type=web-app

quarkus.oidc.token-state-manager.split-tokens=true
#quarkus.http.auth.permission.authenticated.paths=/*
#quarkus.http.auth.permission.authenticated.policy=authenticated
#

quarkus.log.console.enable=true
quarkus.log.console.format=%d{HH:mm:ss} %-5p [%c{2.}] (%t) %s%e%n
quarkus.log.console.color=true

quarkus.log.category."io.quarkus".level=DEBUG
quarkus.log.category."com.gargoylesoftware.htmlunit.DefaultCssErrorHandler".level=ERROR

quarkus.resteasy.gzip.enabled=true 
quarkus.resteasy.gzip.max-input=10M

quarkus.banner.path=logo.txt


%test.mode=test
%dev.mode=dev
%prod.mode=prod

quarkus.http.auth.policy.user-policy1.roles-allowed=user
quarkus.http.auth.policy.admin-policy1.roles-allowed=admin
quarkus.http.auth.policy.test-policy1.roles-allowed=test
quarkus.http.auth.policy.service-policy1.roles-allowed=test,admin,dev
#
quarkus.http.auth.permission.permit1.paths=/api/events/init/*                                
quarkus.http.auth.permission.permit1.policy=permit
##quarkus.http.auth.permission.permit1.methods=GET

quarkus.http.auth.permission.version1.paths=/version/*                                
quarkus.http.auth.permission.version1.policy=permit

#
quarkus.http.auth.permission.service.paths=/api/service/commands/*
#quarkus.http.auth.permission.service.policy=service-policy1
quarkus.http.auth.permission.service.policy=authenticated
##quarkus.http.auth.permission.service.methods=GET
#
quarkus.http.auth.permission.web.paths=/index.html
quarkus.http.auth.permission.web.policy=authenticated
quarkus.http.auth.permission.web.methods=GET
#
#
#quarkus.oidc.token.refresh-expired=false
#
quarkus.oidc.logout.path=/logout
quarkus.oidc.logout.post-logout-path=/
# Only the authenticated users can initiate a logout:
quarkus.http.auth.permission.logout.paths=/logout
quarkus.http.auth.permission.logout.policy=authenticated


life.genny.ApiService/api-rest/url=https://api/qwanda
life.genny.ApiService/api-rest/scope=javax.inject.Singleton

# This google API KEY should not be visible, however for now the alyson has made it public : TODO remove google lib from Alyson
google.api.key=AIzaSyDPzyFcOy2vRsHGHiixgESzy5j-IvJWF4Q

quarkus.native.resources.includes=META-INF/*.properties


# Websocket to Alyson
mp.messaging.outgoing.outgoing-costs.connector=quarkus-websocket

# the WebSockets are exposed on the same port as HTTP
# for non-test profiles, it is quarkus.http.port...
mp.messaging.outgoing.outgoing-costs.url=ws://localhost:${quarkus.http.port}/cost-collector

# for the test profile it is quarkus.http.test-port
%test.mp.messaging.outgoing.outgoing-costs.url=ws://localhost:${quarkus.http.test-port}/cost-collector


mp.messaging.incoming.incoming-costs.connector=quarkus-websocket
# the incoming-costs channel will be fed via a Web Socket endpoint on the `/costs` path
mp.messaging.incoming.incoming-costs.path=/costs

mp.messaging.incoming.collector.path=/cost-collector
mp.messaging.incoming.collector.connector=quarkus-websocket


mp.messaging.incoming.incoming-frontend.connector=quarkus-websocket
# the incoming-frontend channel will be fed via a Web Socket endpoint on the `/frontend` path
mp.messaging.incoming.incoming-frontend.path=/frontend


## OUTGOING
#
## The target URL
#mp.messaging.outgoing.<channelName>.url=ws://localhost:8234/
#
## Message serializer, optional, implementation of `io.quarkus.reactivemessaging.http.runtime.serializers.Serializer`
#mp.messaging.outgoing.<channelName>.serializer=com.example.MySerializer
#
## The number of retries to make for sending a message to a remote websocket endpoint.
## A value greater than 0 is advised. Otherwise, a web socket timeout can result in a dropped message
## The default value is 1
#mp.messaging.outgoing.<channelName>.maxRetries=1
#
## Configures the random factor when using back-off with maxAttempts > 1, 0.5 by default
#mp.messaging.outgoing.<channelName>.jitter=0.7
#
## Configures a back-off delay between attempts to send a request.
## A random factor (jitter) is applied to increase the delay when several failures happen.
#mp.messaging.outgoing.<channelName>.delay=2s
#
#
## INCOMING
#
## The path of the endpoint
#mp.messaging.incoming.<channelName>.path=/my-ws-endpoint
#
## Web socket endpoint buffers messages if a consumer is not able to keep up.
## This setting specifies the size of the buffer. 8 by default
#mp.messaging.incoming.<channelName>.buffer-size=3


